Title:				Theoretische Informatik 1
Subtitle:			Praktikumsaufgabe 1: Modellierung der Petrinetz-Kantine
Author:				Lucas Jenss
ShortAuthor:		Lucas Jenss
UseHelvetica:		yes
Base Header Level:	3
latex input:		x3-assignment-preamble
latex input:		x3-assignment-mmd-compat
latex input:		x3-assignment-begin
latex footer:		x3-assignment-end


<!--
%\sloppy

\newcommand{\transition}[2]{\textrm{#1} $\rightarrow$ \textrm{#2}}

\newcommand{\fig}[2]{%
  \vspace{\parskip}%
  \begin{center}%
    \includegraphics[#1]{figures/#2}%
  \end{center}%
}

\newcommand{\op}[1]{\operatorname{#1}}

% Vorbereich und Nachbereich
\newcommand{\vb}[1]{\bullet \, #1}
\newcommand{\nb}[1]{#1 \, \bullet}

% aktivierte Transition
\newcommand{\ma}[2]{#1[#2\rangle}
-->

# Aufgabenteil 1

## Erläuterung der Modellierung

Die erste zu treffende Entscheidung war die Art und Weise der Warteschlangen-Modellierung. Hierfür wurde folgendes System verwendet:

<!-- \fig{width=0.75\textwidth}{queue} -->

Um sicherzustellen dass sich in der Stelle **Warteschlange** immer max. zwei Besucher befinden, wird eine zusätzliche Stelle **WarteschlangeKapazitaet** hinzugefügt, deren Tokenanzahl der Kapazität der Warteschlange entspricht (im Beispiel zwei). Die Transition <!--\transition{Eingang}{Warteschlange}--> wird nun mit einer zusätzlichen Kante <!--\transition{Warteschlange\-Kapazitaet}{Warteschlange}--> versehen, sodass diese nur schalten kann wenn mindestens ein Kapazitätstoken vorhanden ist. Die Transition welche aus der Warteschlange hinausführt wird analog mit einer Kante versehen, welche ein Token in die "WarteschlangeKapazitaet" Stelle hinzufügt. Das selbe Verfahren wird eingesetzt, um sicherzugehen dass sich maximal eine Person zur Zeit in der Ausgabe befindet.

In der Gesamtlösung verwenden wir diese Technik ebenfalls um die Warteschlange an der Kasse auf drei Personen zu begrenzen. Die Bedienstete, welche für die Essensausgabe verantwortlich ist, wurde als zusätzliches Token modelliert, welches zwischen den beiden Ausgaben für die Gerichte alterniert. Eine erfolgreiche Ausgabe und anschließende Transition zur Kasse ist immer nur dann möglich, wenn sich zwei Token in der Ausgabe befinden, welche die Person sowie die Bedienstete repräsentieren:

<!-- \fig{width=\textwidth}{solution1} -->


## Formale Angabe des Netzes

Ein S/T-Netz wird durch ein 4-Tupel <!--$N = (P,T,W,M_0)$--> definiert. Die einzelnen Bestandteile werden im folgenden aufgeführt:

<!--
\[
\begin{array}{ll}
  P = \{&\\
    &\op{EG}, \op{WK2}, \op{WK1}, \op{WS2}, \op{WS1}\\
    &\op{AK2}, \op{AK1}, \op{A2}, \op{A1}, \op{KK}\\
    &\op{W\_K}, \op{SS}, \op{AG}\\
  \}&
\end{array}
\]


\[
\begin{array}{ll}
  T = \{&\\
    &\op{t1}, \op{t2}, \op{t3}, \op{t4}, \op{t5}, \op{t6}, \op{tB}, \op{tA}\\
  \}&
\end{array}
\]

\[
\begin{array}{ll}
  W_1 = \{&\\

    &(\op{EG}, \op{t2}), (\op{t2}, \op{WS1}), (\op{WS1}, \op{t4}), (\op{t4}, \op{A1}), \\
    &(\op{WK1}, \op{t2}), (\op{t4}, \op{WK1}), (\op{t1}, \op{WS2}), (\op{WS2}, \op{t3}), \\
    &(\op{EG}, \op{t1}), (\op{WK2}, \op{t1}), (\op{t3}, \op{WK2}), (\op{t3}, \op{A2}), \\
    &(\op{AK1}, \op{t4}), (\op{A1}, \op{t6}), (\op{t6}, \op{A2}), (\op{t6}, \op{AK1}), \\
    &(\op{A2}, \op{t5}), (\op{t5}, \op{A1}), (\op{AK2}, \op{t3}), (\op{t5}, \op{AK2}), \\
    &(\op{KK}, \op{t5}), (\op{KK}, \op{t6}), (\op{t5}, \op{W_K}), (\op{t6}, \op{W\_K}), \\
    &(\op{W\_K}, \op{tB}), (\op{tB}, \op{KK}), (\op{tB}, \op{SS}), (\op{SS}, \op{tA}), \\
    &(\op{tA}, \op{AG}) \\

  \}
\end{array}
\]

\[
W(x,y) =
  \begin{cases}
    2 & ; falls \; (x,y) \in \{ (Ausgabe2, t5), (Ausgabe, t6) \} \\
    1 & ; falls \; (x,y) \in W_1 \\
    0 & ; sonst
  \end{cases}
\]

\[
M_0(x) =
  \begin{cases}
    3 & ; falls \; x = KK \\
    2 & ; falls \; x \in \{ EG, WK2, WK1 \} \\
    1 & ; falls \; x \in \{ AK2, AK1, A1 \} \\
    0 & ; sonst
  \end{cases}
\]
-->

<!--\newpage-->
## Formale Schaltfolge für zwei Personen mit unterschiedlichen Gerichten

Ausgehend vom im vorherigen Abschnitt beschriebenen Netz ist folgende Schaltfolge möglich, sodass zwei Personen unterschiedliche Gerichte einnehmen, beginnend mit einem <!--$M$--> welches <!--$M_0$--> gleicht:

<!--
\[
M(x) =
  \begin{cases}
    3 & ; falls \; x = KK \\
    2 & ; falls \; x \in \{ WK2, WK1, EG \} \\
    1 & ; falls \; x \in \{ AK2, AK1, A1 \} \\
    0 & ; sonst
  \end{cases}
\]
-->

Nun wird die Transitionfolge <!--$t1 \rightarrow t3 \rightarrow t2 \rightarrow t4 \rightarrow t6 \rightarrow t5 \rightarrow tB \rightarrow tb \rightarrow tA \rightarrow tA$--> geschaltet:

<!--
\[
\begin{array}{c}
  \vb{t1} = \{ EG, WK2 \} \\
  M(WK) = 2 \geq 1 = W(WK, t1) \\
  M(WK2) = 1 \geq 1 = W(WK2, t1)
  \\
  \ma{M}{t1}M' \wedge M' =
    \begin{cases}
      3 & ; falls \; x = KK \\
      2 & ; falls \; x \in \{ WK1 \} \\
      1 & ; falls \; x \in \{ EG, WS2, WK2, AK2, AK1, A1 \} \\
      0 & ; sonst
    \end{cases}
\end{array}
\]

\[
\begin{array}{c}
  \vb{t3} = \{ WS2, AK2 \} \\
  M'(WS2) = 1 \geq 1 = W(WS2, t3) \\
  M'(AK2) = 1 \geq 1 = W(AK2, t3) \\
  \\
  \ma{M'}{t3}M'' \wedge M'' =
    \begin{cases}
      3 & ; falls \; x = KK \\
      2 & ; falls \; x \in \{ WK1, WK2 \} \\
      1 & ; falls \; x \in \{ EG, A2, A1 \} \\
      0 & ; sonst
    \end{cases}
\end{array}
\]

\[
\begin{array}{c}
  \vb{t2} = \{ EG, WK1 \} \\
  M''(EG) = 1 \geq 1 = W(EG, t2) \\
  M''(WK1) = 2 \geq 1 = W(WK1, t2) \\
  \\
  \ma{M''}{t2}M''' \wedge M''' =
    \begin{cases}
      3 & ; falls \; x = KK \\
      2 & ; falls \; x \in \{ WK2 \} \\
      1 & ; falls \; x \in \{ WK1, WS1, A2, A1 \} \\
      0 & ; sonst
    \end{cases}
\end{array}
\]


\[
\begin{array}{c}
  \vb{t4} = \{ WS1, AK1 \} \\
  M'''(WS1) = 1 \geq 1 = W(WS1, t4) \\
  M'''(AK1) = 1 \geq 1 = W(AK1, t4) \\
  \\
  \ma{M'''}{t4}M'''' \wedge M'''' =
    \begin{cases}
      3 & ; falls \; x = KK \\
      2 & ; falls \; x \in \{ WK1, WK2, A1 \} \\
      1 & ; falls \; x \in \{ A2 \} \\
      0 & ; sonst
    \end{cases}
\end{array}
\]


\[
\begin{array}{c}
  \vb{t6} = \{ A1, KK \} \\
  M''''(A1) = 2 \geq 2 = W(A1, t6) \\
  M''''(KK) = 3 \geq 1 = W(KK, t6) \\
  \\
  \ma{M''''}{t6}M''''' \wedge M''''' =
    \begin{cases}
      2 & ; falls \; x \in \{ KK, WK1, WK2, A2 \} \\
      1 & ; falls \; x \in \{ AK1, W\_K \} \\
      0 & ; sonst
    \end{cases}
\end{array}
\]
-->

usw.









## Erreichbarkeitsgraph der Schaltfolge

<!-- \fig{width=0.65\textwidth}{erreichbarkeitsgraph1} -->




## Netzkomplement

Da Snoopy keine Kapazitäten unterstützt, wurde das Netz von Anfang an ohne diese modelliert. Das Netzkomplement ist somit nicht zu berechnen, bzw. es ist identisch mit der bereits gezeigen Lösung.



## Prozessnetz

<!-- \fig{width=0.9\textwidth}{solution-process-net} -->



## Geschlossenes System mit fünf Kunden

Das geschlossene Netz für fünf Kunden wurde wie folgt modelliert:

<!-- \fig{width=0.9\textwidth}{solution1-closed} -->

Der daraus resultierende Erreichbarkeitsgraph hat 484 Knoten und 1518 Kanten. Die kombinatorische Explosion (nur fünf Personen, 1500 Kanten) ist das Resultat der Tatsache, dass, ausgehend von jedem Knoten, fast alle Transitionen schalten können, da das Netz viele Transitionen, aber nur wenige Limitierungen für das Schaltverhalten dieser hat. Wenn man den Graph von Charlie mit dem "TreeLayout" rendern lässt, sieht man, dass er bei dem Knoten "Alle Personen befinden sich am Eingang" anfängt, und dann immer breiter wird. Die Breite lässt sich dadurch erklären, dass die Anzahl der Möglichkeiten, welche Transition als nächstes schaltet wächst, je mehr Personen/Token sich innerhalb des Netztes befinden. Nachdem der Graph seine maximale Breite erreicht hat, fängt er wieder an "zusammenzuschrumpfen", bis er im Knoten "Alle Personen befinden sich im Speisesaal" wieder nur eine Breite von einem Knoten hat. Wenn sich also nun alle Personen im Speisesaal versammelt haben, haben diese nur noch die Möglichkeit wieder zum Eingang zurückzukehren und wieder ein Gericht zu wählen. Da an dieser Stelle aber bereits alle möglichen Durchläufe der fünf Personen durch das Netz im Graph vorhanden sind, werden keine neuen Knoten erzeugt, sondern lediglich Kanten zu den bereits bestehenden. Hier zur Referenz noch einmal die Form des Graphen (bei dem leider die oberen und unteren Endknoten abgeschnitten sind):

<!-- \fig{width=0.5\textwidth}{charlie-graph} -->


<!--\newpage-->
# Aufgabenteil 2

## Modellierung

Das Netz der umgebauten Kantine wurde wie folgt modelliert:

<!-- \fig{width=0.70\textwidth}{solution2} -->



# Definition: Netzmorphismus

**Alternative Definition**: Eine Netzabbildung <!--$f$--> von <!--$N_1$--> in <!--$N_2$--> bildet <!--$S_1 \cup T_1$--> in <!--$S_2 \cup T_2$--> ab. Wir nennen sie Netzmorphismus, wenn sie keine Kanten zerrißt, d.h. wenn:

<!--\[
  (x, y) \in F_1 \Rightarrow f(x) = f(y) \vee (f(x), f(y)) \in F_2
\]-->

Quelle: Petri-Netze - Grundlagen und Anwendung (Bernd Baumgarten), BI-Wiss.-Verl., 1990, ISBN 3-411-14291-X

<!-- \fig{width=\textwidth}{netzmorphismus} -->

Das gezeigte Beispiel ist laut der alternativen Definition ein Netzmorphismus, mit der Funktion

<!--\[
f(x) = \begin{cases}
  (s3, s3) & ; falls \; x = (s1, t1)\\
  (s3, t4) & ; falls \; x = (t1, s2)\\
  (t4, t4) & ; falls \; x = (s2, t2)\\
  (t4, s3) & ; falls \; x = (t2, s1)
\end{cases}
\]-->
